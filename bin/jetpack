#!/usr/bin/ruby

#think: bash-like ruby

require "yaml"
require "erb"
require "fileutils"
require "etc"
require "pathname"

local_lib_dir = File.join(File.dirname(__FILE__), "../lib")
$LOAD_PATH << local_lib_dir if File.directory?(local_lib_dir)

#Env vars like RUBYOPT get passed on to jruby.
#Cleanse the environment of these vars so that jruby is not affected.
ENV.delete_if{|k,v|k =~ /(^RUBY|^BUNDLE)/}

require "jetpack/settings"

include FileUtils

def halt(message)
  $stderr.puts message
  exit 1
end

def x!(cmd)
  puts cmd if ENV['VERBOSE']
  system(cmd) || halt("'#{cmd}' failed.")
end

halt("usage: jetpack <project_path> <dest path>") unless ARGV.length==2 && File.directory?(ARGV[0])

@src_dir, @dest_dir = ARGV

@created = []

@settings = Jetpack::Settings.load_from_project(@src_dir)

puts @settings.inspect

unless @settings.jruby?
  halt(%{Your config/jetpack.yml must at least contain a pointer to the desired jruby-complete jar.
Ex:

jruby: http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby-complete-1.6.4.jar
jetty: http://dist.codehaus.org/jetty/jetty-hightide-7.4.5/jetty-hightide-7.4.5.v20110725.zip
  })
end

script_start_time = Time.now

@jruby_jar_file = "vendor/jruby.jar"
@jetpack_dir = File.expand_path(File.join(File.dirname(__FILE__), ".."))

@gem_home = "file:" + @jruby_jar_file + "!/META-INF/jruby.home/lib/ruby/gems/1.8"
@gem_path = @gem_home + ":vendor/bundler_gem"

@java_dash_jar = "PATH=$PATH:$(dirname $0) GEM_HOME=\"#{@gem_home}\" GEM_PATH=\"#{@gem_path}\" exec java #{@settings.java_options} -jar"
@jruby_opts = @settings.ruby_version.to_s == '1.9' ? '--1.9' : ''

def jruby!(cmd)
  x! "cd #{@dest_dir} && #{@java_dash_jar} #{@jruby_jar_file} #{@jruby_opts} #{cmd}"
end

def download(url, local_file)
  raise "refusing to download non-local file '#{url}' in test mode" if Object.const_defined?(:JETPACK_TEST_MODE) &&
                                                                       JETPACK_TEST_MODE &&
                                                                       !url =~ /^file/
  x! "curl --silent --show-error -o #{local_file} #{url}"
end

def unzip(file, directory, pattern="")
  x! "unzip -qq #{file} #{pattern} -d #{directory}"
end

def same_contents_in_both_dirs?(src_dir, target_dir, file_or_dir)
  File.exists?(File.join(src_dir, file_or_dir)) ?
    system("diff -qr #{src_dir}/#{file_or_dir} #{target_dir}/#{file_or_dir}") :
    true
end

def install_bundler_gem
  unless File.exists?("#{@dest_dir}/vendor/bundler_gem")
    jruby! " -S gem install #{@jetpack_dir}/gems/bundler-1.1.0.gem -i vendor/bundler_gem --no-rdoc --no-ri"
  end
end

def regenerate_gemfile_lock_if_platform_java_is_not_found
  gemfile_lock_lines = File.read(File.join(@dest_dir, "Gemfile.lock")).split("\n")
  platforms_start = gemfile_lock_lines.find_index{|line|line == "PLATFORMS"} + 1
  platforms_count = gemfile_lock_lines.slice(platforms_start..-1).find_index{|line|line == ""} - 1
  platforms = gemfile_lock_lines.slice(platforms_start..(platforms_start+platforms_count)).map{|platform_str|platform_str.strip}
  unless platforms.include?("java")
    $stderr.puts %{
      WARNING: Your Gemfile.lock does not contain PLATFORM java.
      Automtically regenerating and overwriting Gemfile.lock using jruby
       - because otherwise, jruby-specific gems would not be installed by bundler.
      To make this message go away, you must re-generate your Gemfile.lock using jruby.
    }
    jruby! " -e 'require \"rubygems\"; require \"bundler\"; Bundler.definition.lock(Bundler.default_lockfile)'"
  end
end

def bundle_install
  install_bundler_gem
  regenerate_gemfile_lock_if_platform_java_is_not_found
  #Do the equivalent of 'bundle' in code so we know exactly which bundler we're using.
  jruby! " -e 'require \"rubygems\"; require \"bundler\"; require \"bundler/cli\"; cli=Bundler::CLI.new; cli.options={:deployment=>true}; cli.install'"
end

def install_jetty(vendor_dir)
  jetty_dir = File.join(vendor_dir, "jetty")
  Dir["#{vendor_dir}/jett*"].to_a.each{|f|rm_rf(f)}
  download @settings.jetty, File.join(vendor_dir, "jetty.zip")
  unzip File.join(vendor_dir, "jetty.zip"), vendor_dir
  rm File.join(vendor_dir, "jetty.zip")
  mv Dir["#{vendor_dir}/jetty*"].to_a.first, jetty_dir
  rm_rf "#{jetty_dir}/webapps"
  jetty_dir
end

def install_commons_validator(lib_dir)
  commons_validator_zip = File.join(lib_dir, "commons-validator.zip")
  download "http://mirrors.axint.net/apache//commons/validator/binaries/commons-validator-1.4.0-bin.zip", commons_validator_zip
  unzip commons_validator_zip, lib_dir
  mv File.join(lib_dir, "commons-validator-1.4.0", "commons-validator-1.4.0.jar"), lib_dir
  rm_rf(File.join(lib_dir, "commons-validator-1.4.0"))
  rm commons_validator_zip
  lib_dir
end

def setup_special_filters(vendor_dir)
  web_inf_lib_dir = File.join(@dest_dir, "WEB-INF/lib")
  mkdir_p web_inf_lib_dir

  install_commons_validator web_inf_lib_dir

  web_inf_classes_dir = File.join(@dest_dir, "WEB-INF/classes")
  mkdir_p web_inf_classes_dir

  puts "Compiling Jetty filters"
  x! "javac -classpath #{vendor_dir}/jetty/lib/servlet-api-3.0.jar -d #{web_inf_classes_dir} #{@jetpack_dir}/src/java/jetpack/filter/IgnoreUnknownHttpMethodsFilter.java"
  x! "javac -classpath #{vendor_dir}/jetty/lib/servlet-api-3.0.jar:#{web_inf_lib_dir}/commons-validator-1.4.0.jar -d #{web_inf_classes_dir} #{@jetpack_dir}/src/java/jetpack/filter/ValidUrlFilter.java"
end

def install_jruby_rack_jar(vendor_dir)
  download @settings.jruby_rack, File.join(vendor_dir, "jruby-rack.jar")
end

def process_template_files(erb_files)
  erb_files.each do |erb_file|
    evaled_contents = ERB.new(File.read(erb_file)).result(binding)
    target_file = erb_file.sub(/\.erb$/, "")
    File.open(target_file, "w"){|f|f<<evaled_contents}
    File.new(target_file).chmod(File.stat(erb_file).mode)
    rm erb_file

    @created.delete(erb_file)
    @created << target_file
  end
end

def note_files_created(dir)
  before = Dir["#{dir}/**/{*,.*}"]
  yield
  after = Dir["#{dir}/**/{*,.*}"]
  after - before
end

def overlay_files(overlay_dir, target_dir)
  files_created = note_files_created(target_dir) do
    # this (/.) is what you have to do in ruby to make the children of the source dir
    # all (including dotfiles) copy cleanly underneath the dest dir
    FileUtils.cp_r("#{overlay_dir}/.", "#{target_dir}/")
  end

  process_template_files files_created.select{|f|f=~/\.erb$/}
end

def dest_dir_files
  base_path = Pathname.new(@dest_dir)
  files = Dir["#{@dest_dir}/**/{*,.*}"].map{|f|Pathname.new(f).relative_path_from(base_path).to_s}
  files.sort.uniq - ["..", "."]
end

def reset_dest_dir
  rm_rf(@dest_dir)
  dest_parent = @dest_dir.split(File::SEPARATOR).slice(0..-2).join(File::SEPARATOR)
  mkdir_p(dest_parent)
  cp_r(@src_dir, @dest_dir, :preserve => true)
end

def rsync
  x!([
    "rsync -av --delete --stats",
    "--exclude=.jetpack-generated",
    "--exclude-from=#{@dest_dir}/.jetpack-generated",
    "#{@src_dir}/ #{@dest_dir}"
  ].join(" "))
end

if File.exists?(@dest_dir) && 
     same_contents_in_both_dirs?(@src_dir, @dest_dir, "config/jetpack.yml") &&
     same_contents_in_both_dirs?(@src_dir, @dest_dir, "Gemfile.lock") &&
     same_contents_in_both_dirs?(@src_dir, @dest_dir, "config/jetpack_files")
  rsync  
  $stderr.puts "config/jetpack.yml is the same in both directories, skipping build."
  exit
else
  reset_dest_dir
end

project_files = dest_dir_files

vendor_dir = File.join(@dest_dir, "vendor")
mkdir_p vendor_dir
download @settings.jruby, File.join(@dest_dir, @jruby_jar_file)

bundle_install if File.exists?(File.join(@dest_dir, "Gemfile.lock"))
if @settings.jetty?
  jetty_dir = install_jetty(vendor_dir)
  install_jruby_rack_jar vendor_dir #raise if jar not found

  FileUtils.mkdir_p(File.join(@dest_dir, "log"))
  @listener = if @settings.rails?
    "org.jruby.rack.rails.RailsServletContextListener"
  else
    "org.jruby.rack.RackServletContextListener"
  end
  
  setup_special_filters(vendor_dir)
end

config_jetpack_dir_in_project = File.join(@dest_dir, "config/jetpack_files")
if File.directory?(config_jetpack_dir_in_project)
  overlay_files config_jetpack_dir_in_project, @dest_dir
end

jetpack_created_files = dest_dir_files - project_files
File.open(File.join(@dest_dir, ".jetpack-generated"), "w") do |f| 
  f.puts jetpack_created_files.sort.join("\n")
end

elapsed_seconds = (Time.now - script_start_time).to_i

puts %{Created:
  #{@created.uniq.sort.join("\n  ")}
Time: #{elapsed_seconds} s
}
