#!/usr/bin/ruby

require "yaml"
require "erb"
require "fileutils"
require "etc"

local_lib_dir = File.join(File.dirname(__FILE__), "../lib")
$LOAD_PATH << local_lib_dir if File.directory?(local_lib_dir)

#Env vars like RUBYOPT get passed on to jruby.
#Cleanse the environment of these vars so that jruby is not affected.
ENV.delete_if{|k,v|k =~ /(^RUBY|^BUNDLE)/}

require "preflight/settings"

include FileUtils

def halt(message)
  $stderr.puts message
  exit 1
end

def x!(cmd)
  puts cmd if ENV['VERBOSE']
  system(cmd) || halt("'#{cmd}' failed.")
end


halt("usage: preflight <project_path>") unless ARGV.length==1 && File.directory?(ARGV[0])

@path_to_project = ARGV.shift
@created = []

@settings = Preflight::Settings.load_from_project(@path_to_project)

puts @settings.inspect

unless @settings.jruby?
  halt(%{Your config/preflight.yml must at least contain a pointer to the desired jruby-complete jar.
Ex:

jruby: http://jruby.org.s3.amazonaws.com/downloads/1.6.4/jruby-complete-1.6.4.jar
jetty: http://dist.codehaus.org/jetty/jetty-hightide-7.4.5/jetty-hightide-7.4.5.v20110725.zip
  })
end

script_start_time = Time.now

@jruby_jar_file  = "vendor/jruby.jar"
@preflight_dir   = File.expand_path(File.join(File.dirname(__FILE__), ".."))

@gem_home = "file:" + File.expand_path(File.join(@settings.app_root, @jruby_jar_file)) + "!/META-INF/jruby.home/lib/ruby/gems/1.8"
@gem_path = @gem_home + ":vendor/bundler_gem"

@java_dash_jar = "PATH=$PATH:$(dirname $0) GEM_HOME=\"#{@gem_home}\" GEM_PATH=\"#{@gem_path}\" java #{@settings.java_options} -jar"

def jruby!(cmd)
  x! "cd #{@path_to_project} && #{@java_dash_jar} #{@jruby_jar_file} #{cmd}"
end

def download(url, local_file)
  x! "curl --silent --show-error -o #{local_file} #{url}"
end

def unzip(file, directory, pattern="")
  x! "unzip -qq #{file} #{pattern} -d #{directory}"
end

def install_bundler_gem
  unless File.exists?("#{@path_to_project}/vendor/bundler_gem")
    jruby! " -S gem install #{@preflight_dir}/gems/bundler-1.1.rc.gem -i vendor/bundler_gem --no-rdoc --no-ri"
  end
  @created << "#{@path_to_project}/vendor/bundler_gem"
end

def bundle_install
  install_bundler_gem
  #Do the equivalent of 'bundle' in code so we know exactly which bundler we're using.
  jruby! " -e 'require \"rubygems\"; require \"bundler\"; require \"bundler/cli\"; cli=Bundler::CLI.new; cli.options={:deployment=>true}; cli.install'"
  @created << "#{@path_to_project}/vendor/bundle"
end

def write_script(script_path, contents)
  File.open(script_path, "w") { |f| f << contents }
  chmod 0700, script_path
  @created << script_path
end

def create_ruby_script(ruby_script_path)
  write_script ruby_script_path, \
%{#!/bin/bash

cd $(dirname $0)/..
#{@java_dash_jar} #{@jruby_jar_file} "$@"
}
end

def create_rake_script(rake_script_path)
  write_script File.join(File.dirname(rake_script_path), ".rake_runner"),
    File.open(File.expand_path("../../template/.rake_runner", __FILE__)).read

  write_script rake_script_path, \
%{#!/bin/bash

set -e

export FULL_DIR=`cd $(dirname $0); pwd`
export PATH=$FULL_DIR:$PATH
export GEM_HOME="#{@gem_home}"
export GEM_PATH="#{@gem_path}"

cd $(dirname $0)/..

.rake_runner "$@"
}


end

def install_jetty(vendor_dir)
  jetty_dir = File.join(vendor_dir, "jetty")
  Dir["#{vendor_dir}/jett*"].to_a.each{|f|rm_rf(f)}
  download @settings.jetty, File.join(vendor_dir, "jetty.zip")
  unzip File.join(vendor_dir, "jetty.zip"), vendor_dir
  rm File.join(vendor_dir, "jetty.zip")
  mv Dir["#{vendor_dir}/jetty*"].to_a.first, jetty_dir
  rm_rf "#{jetty_dir}/webapps"
  jetty_dir
end

def install_jruby_rack_jar(vendor_dir)
  download @settings.jruby_rack, File.join(vendor_dir, "jruby-rack.jar")
end

def copy_jetty_files_dir_into(jetty_dir)
  x! "cp -R #{File.join(@preflight_dir, "jetty_files")}/* #{jetty_dir}/"
end

def copy_project_config_jetty_dir_into(jetty_dir)
  config_jetty_dir_in_project = File.join(@path_to_project, "config/jetty")
  return unless File.directory?(config_jetty_dir_in_project)
  x! "cp -R #{config_jetty_dir_in_project}/* #{jetty_dir}/"
end

def process_template_files_in(dir)
  Dir[File.join(dir, "**/*.erb")].each do |erb_file|
    evaled_contents = ERB.new(File.read(erb_file)).result(binding)
    target_file = erb_file.sub(/\.erb$/, "")
    File.open(target_file, "w"){|f|f<<evaled_contents}
    File.new(target_file).chmod(File.stat(erb_file).mode)
    rm erb_file
  end
end

def create_web_inf_subdirectory
  mkdir_p File.join(@path_to_project, "WEB-INF")
  web_xml_contents = ERB.new(File.read(File.join(@preflight_dir, "web/web.xml.erb"))).result(binding)
  File.open(File.join(@path_to_project, "WEB-INF/web.xml"), "w"){|f|f<<web_xml_contents}
end

ruby_script_path = File.join(@path_to_project, "bin/ruby")
jruby_script_path = File.join(@path_to_project, "bin/jruby")
rake_script_path = File.join(@path_to_project, "bin/rake")
bin_dir = File.join(@path_to_project, "bin")
vendor_dir = File.join(@path_to_project, "vendor")

mkdir_p File.join(@path_to_project, "bin")
mkdir_p File.join(@path_to_project, "vendor")
download @settings.jruby, File.join(@path_to_project, @jruby_jar_file)
create_ruby_script ruby_script_path
ln_sf File.expand_path(ruby_script_path), jruby_script_path
create_rake_script rake_script_path
bundle_install if File.exists?(File.join(@path_to_project, "Gemfile.lock"))
if @settings.jetty?
  jetty_dir = install_jetty(vendor_dir)
  install_jruby_rack_jar vendor_dir #raise if jar not found

  copy_jetty_files_dir_into jetty_dir
  copy_project_config_jetty_dir_into jetty_dir  
  process_template_files_in jetty_dir
  
  create_web_inf_subdirectory
end

elapsed_seconds = (Time.now - script_start_time).to_i

puts %{Created:
  #{@created.join("\n  ")}
Time: #{elapsed_seconds} s
}
