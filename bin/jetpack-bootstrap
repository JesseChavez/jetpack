#!/usr/bin/ruby

#think: bash-like ruby

require "fileutils"
include FileUtils

def halt(message)
  $stderr.puts message
  exit 1
end

def x!(cmd)
  puts cmd if ENV['VERBOSE']
  system(cmd) || halt("'#{cmd}' failed.")
end


@jetpack_dir = File.join(File.dirname(__FILE__), "..")

def collection_dir(collection_name)
  File.join(@jetpack_dir, "collections/#{collection_name}")
end

unless ARGV.length==2 && 
       File.directory?(ARGV[0]) &&
       File.directory?(collection_dir(ARGV[1]))
  halt("usage: jetpack-bootstrap project_path [collection...]\n" +
       "valid collections: " + Dir["#{@jetpack_dir}/collections/*"].to_a.sort.join(" ")) 
end

path_to_project, collection_name = ARGV
jetpack_yml_path = File.join(path_to_project, "config/jetpack.yml")
jetpack_files_dir = File.join(path_to_project, "config/jetpack_files")

halt("#{jetpack_yml_path} already exists, exiting.") if File.exists?(jetpack_yml_path)
halt("#{jetpack_files_dir} already exists, exiting.") if File.exists?(jetpack_files_dir)

mkdir_p(File.join(path_to_project, "config"))
cp(File.join(collection_dir(collection_name), "jetpack.yml"), jetpack_yml_path)

mkdir_p(jetpack_files_dir)
# this (/.) is what you have to do in ruby to make the children of the source dir
# all (including dotfiles) copy cleanly underneath the dest dir
cp_r(collection_dir("base") + "/.", "#{jetpack_files_dir}/") 
cp_r(collection_dir(collection_name) + "/.", "#{jetpack_files_dir}/")
rm("#{jetpack_files_dir}/jetpack.yml")
